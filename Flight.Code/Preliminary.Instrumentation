from labjack import ljm
import datetime
import os
import sys
import time

from time import sleep
from picamera import PiCamera
from datetime import datetime, timedelta

handle = ljm.openS("T7", "ANY", "ANY")
info = ljm.getHandleInfo(handle)
name0 = "AIN0" #thermistor
name1 = "AIN1" #temp1 probe noted by sharpie
name2 = "AIN2" #temp2 probe not noted by sharpie
name3 = "AIN3" #optointerrupter
numIterations = 900 #900 = 1 hr


rate = 1000 #in ms
rateUS = rate*1000

cwd = os.getcwd()

intervalHandle = 0
ljm.startInterval(intervalHandle, rateUS)
curIteration = 0
numSkippedIntervals = 0
import numpy as np
lastTick = ljm.getHostTick()
duration = 0

appStartTime = datetime.now()
startTimeStr = appStartTime.strftime("%Y/%m/%d %I:%M:%S%p")
timeStr = appStartTime.strftime("%Y_%m_%d-%I_%M_%S%p")

fileName = timeStr + "-%s-Trial.txt"%(name0+name1+name2+name3)
filePath = os.path.join(cwd, fileName)

fileNameAdded = fileName + '{counter:03d}'
filePathAdded = os.path.join(cwd, fileNameAdded)
import io 
camera = PiCamera()
def wait(camera):
    #Calculate the delay to start next image
    next_im = (datetime.now() + timedelta(seconds = 3)).replace(second=0)
    delay = (next_im - datetime.now()).seconds
    sleep(3)
while curIteration < numIterations:
    for i, filename in enumerate(camera.capture_continuous(filePath + 'image{counter:003d}.jpg')):  # old version '/home/pi/Documents/Camera/image{counter:003d}.jpg'
       with io.open(filePath, 'a') as f:
       
           try:
               f.write("Time Stamp, Duration(ms), Temp(C), %s" %(name0+name1+name2+name3))
               numSkippedIntervals = ljm.waitForNextInterval(intervalHandle)
               curTick = ljm.getHostTick()
               duration = (curTick - lastTick)/1000
               curTime = datetime.now()
               curTimeStr = curTime.strftime("%Y/%m/%d %I:%M:%S%p")
               result0 = ljm.eReadName(handle, name0) #thermistor
               result1 = ljm.eReadName(handle, name1) #temp1 probe noted by sharpie
               result2 = ljm.eReadName(handle, name2) #temp2 probe not noted by sharpi
               result3 = ljm.eReadName(handle, name3) #opto-interrupter
               ADC = 262144 #18-bit T7
               resistance0 = -(10000*result0)/(result0-3.3) #thermistorResistance
               invTemp = 1/(298.15)+1/(3950)*np.log(resistance0/10000)
               Temp0K = 1/invTemp
               Temp0C = Temp0K - 273.15 #thermistorCelsius
               Resistance1 = (result1)/(result1 - 5) #tempProbe1Resistance
               CurrentOut1 = result1/10000 #ohms
               TempOutC1 = (25/0.0002982)*CurrentOut1 + 22.9 #22 not 25 due to calibration
               Resistance2 = (result2)/(result2 - 5) #tempProbe2Resistance
               CurrentOut2 = result2/10000 #ohms
               TempOutC2 = (25/0.0002982)*CurrentOut2 + 20.5 #20 not 25 due to calibration
               threshold = 0.01 #optoInterrupterThresholdValue
               print("%s reading: %f V, %f Ohms, %f C,  duration: %0.1f ms,  --skipped intervals: %i" %(name0, result0, resistance0, Temp0C, duration, numSkippedIntervals))
               print("%s reading: %f V, %f C, duration: %0.1f ms,  --skipped intervals: %i" %(name1, result1, TempOutC1, duration, numSkippedIntervals))
               print("%s reading: %f V, %f C, duration: %0.1f ms,  --skipped intervals: %i" %(name2, result2, TempOutC2, duration, numSkippedIntervals))
               print("%s reading: %f V,  duration: %0.1f ms,  --skipped intervals: %i" %(name3, result3, duration, numSkippedIntervals))
               if result3 > threshold:
                   wheel = "false", print(bool, False, "--Calibrating")
               if result3 < threshold:
                   wheel = "true", print(bool, True, "--Outside Data")
               print('Captured %s' % filename)
               lastTick = curTick
               curIteration = curIteration + 1
               f.write("%s, %0.3f\r\n, %0.3f\r\n, %0.3f\r\n, %0.3f\r\n, %0.3f\r\n, %0.3s\r\n" %(timeStr, duration, Temp0C, TempOutC1, TempOutC2, result3, wheel))
           
               wait(camera)
               if i == 900: #match iteration number
                  break
           #lastTick = curTick
           #curIteration = curIteration + 1
           except KeyboardInterrupt:
                  break
           except Exception:
                  import sys
                  print(sys.exc_info()[1])
                  break
print("\nFinished")
f.close()
ljm.cleanInterval(intervalHandle)
ljm.close(handle)
sys.exit()
#when finished save to file, re-run function

