from labjack import ljm
import datetime
import os
import sys
import time
from time import sleep
from picamera import PiCamera
from datetime import datetime, timedelta
import io
import numpy as np
import hashlib
import serial


#Set up serial port 
##single RS-232 serial connection == 8 data bits, no parity, 1 stop bit, no flow control 
ser = serial.Serial(
    port='/dev/ttyAMA0',     ## check port with python -m serial.tools.list_ports from terminal command line
    baudrate=1200,                    ##DB9 pin2 == 'received data'
    parity=serial.PARITY_NONE,        ##DB9 pin3 == 'transmit data'
    stopbits=serial.STOPBITS_ONE,     ##DB9 pin5 == 'signal ground'
    bytesize=serial.EIGHTBITS,
    timeout=1
)
ser.xonxoff = False #disable software flow control
ser.rtscts = False #disable harware (RTS/CTS) flow control
ser.dsrdtr = False #disable hardware (DSR/DTR) flow control

try: 
    ser.isOpen()
except Exception:
    print ("error open serial port: " + str(Exception))
    exit()
print(ser.portstr)




#Set up files for data aquisition
cwd = os.getcwd()
appStartTime = datetime.now()
startTimeStr = appStartTime.strftime("%Y/%m/%d %I:%M:%S%p") #Year-Month-Day-Hr-Min-Sec Format
timeStr = appStartTime.strftime("%Y_%m_%d-%I_%M_%S%p")
fileName = timeStr + "-%s-Metadata.txt"%("Radiometer")
filePath = os.path.join(cwd, fileName) #Current Work Directory will be in /downloads
fileNameAdded = fileName + '{counter:03d}' #:03d counter will allow up to 999 loops before overwrite
filePathAdded = os.path.join(cwd, fileNameAdded)
#All data except stream (MetaData) will go into .txt
#..._aData is going to be a seperate csv file for Pandas to operate on
fileName_aData = timeStr + "-%s-Stream.csv"%("Radiometer")
filePath_aData = os.path.join(cwd, fileName_aData) 
fileNameAdded_aData = fileName_aData + '{counter:03d}' 
filePathAdded_aData = os.path.join(cwd, fileNameAdded_aData)
  
#Must be in loop 
#while True:
    #ser.write(bytes(b'filePath')) #cd file of metadata  '/Downloads/Python_LJM_2018_10_19/2019_06_12-01_56_33PM-Radiometer-Metadata.txt
    #out = ser.read(125).decode(encoding='ascii', errors='ignore').strip()  #reading out gps should read 125 bytes; which is the full length of HASP serial latency string
    #time.sleep(12) #correspond to 12 second wait between HASPgps string 
    #print("Received: " + out)
    #f.write(out) # reminder for plug in in full flight code
    
#port configuration
handle = ljm.openS("T7", "ANY", "ANY")
info = ljm.getHandleInfo(handle)
name0 = "AIN0" #thermistor
name1 = "AIN1" #temp1 probe noted by sharpie
name2 = "AIN2" #temp2 probe not noted by sharpie
#name3 = "AIN3" #optointerrupter
numIterations = 900 #900 = 1 hr

#non-stream configuration
rate = 1000 #in ms
rateUS = rate*1000
intervalHandle = 0
ljm.startInterval(intervalHandle, rateUS)
curIteration = 0
numSkippedIntervals = 0
import numpy as np
lastTick = ljm.getHostTick()
duration = 0
camera = PiCamera()
def wait(name0, name1, name2, camera):
    #Calculate the delay to start next image
    next_im = (datetime.now() + timedelta(seconds = 0.1)).replace(second=0)
    delay = (next_im - datetime.now()).seconds
    sleep(0.1)

#stream configuration
aScanListNames=["AIN3", "AIN4","AIN5","AIN6","AIN7","AIN8","AIN9"]         #Scan List names to Stream for Radiometer and opto
numAddresses = len(aScanListNames)
aScanList = ljm.namesToAddresses(numAddresses, aScanListNames)[0]
scanRate = 2100 #Scans per second per channel
#THE SCIENCE GOAL IS 2000 Hz :: USING A LARGER SCAN RATE WILL MAKEUP FOR PERFORMANCE 

numScans = 2101 #Number of scans to perform
#FOR CURRENT LOOP SETUP MUST BE LARGER THAN scanRate :: MAY CHANGE

MAX_REQUESTS = 28  # The number of eStreamRead calls that will be performed.
#NEED TO COUNT BY (NumChannel*NumSecond) DESIRED == 70 requests equals 10 seconds for 7 channels
#four seconds possible outcome -- 7*4=28

scansPerRead = int(scanRate) #Notated as skipping in intervals of 7,
                             #but this is accounted for by the number of channels
                             #it is reading out; no need to worry about missing data

###MAY NEED TO STOP STREAM BEFORE IT STARTS DEPENDING ON ACTIVE STREAM ERROR 2605 FROM PREVIOUS TRIAL###
#ljm.eStreamStop(handle)
###TESTING REQUIRED###


###HASP NOTATION###
class Payload:
    def __init__(self, project, AIO, instrument):
        self.project = project
        self.AIO = AIO
        self.instrument = instrument 
    
Payload1 = Payload('SWARMS', 'AI0', 'Thermistor')
Payload2 = Payload('SWARMS', 'AI1', 'Temp_Probe_1')
Payload3 = Payload('SWARMS', 'AIN2', 'Temp_Probe_2')
Payload4 = Payload('SWARMS', 'AIN3', 'Opto_Interrupter')
Payload5 = Payload('SWARMS', 'null', 'Pi_Camera')
Payload6 = Payload('SWARMS', 'AIN4-9', 'Radiometer')
Payload7 = Payload('SWARMS', 'null', 'Linear_Regulator')


print(Payload2.instrument, Payload2.AIO, Payload3.instrument, Payload3.AIO, Payload6.instrument, Payload6.AIO)

#Timestamp (seconds since January 1, 1970) (byte 2-5)
int(time.time()) #seconds since the epoch
print("Seconds since epoch = ", int(time.time()))

# will return integer number of nanoseconds since epoch
x = (float('%.9f' %time.time()) - int(time.time())) 
x *= 1E9
print("Nanoseconds since last second = ", x)
#For record size calculation
sum(os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f))
print("Record size = ", sum(os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f)))



#start loop for non-stream instrumentation
while curIteration < numIterations:
    for i, filename in enumerate(camera.capture_continuous(filePath + 'image{counter:003d}.jpg')):  
       with io.open(filePath, 'a') as f:
           try:
               c = hashlib.md5(open(filePath,'rb').read()).hexdigest() #calculate checksum in file from looped filepath writing
               f.write("Payload RecordType %s: %s, %s: %s, %s: %s " %(Payload2.instrument, Payload2.AIO,
                                                   Payload3.instrument, Payload3.AIO, Payload6.instrument, Payload6.AIO)) #record type indicator (byte 1)
               ser.write(bytes(str("Payload RecordType %s: %s, %s: %s, %s: %s " %(Payload2.instrument, Payload2.AIO,
                                                   Payload3.instrument, Payload3.AIO, Payload6.instrument, Payload6.AIO)).encode(encoding='ascii', errors='ignore')))
               f.write("\nSeconds since epoch = %i " %int(time.time())) #Timestamp (seconds since January 1, 1970) (byte 2-5)
               ser.write(bytes(str("\nSeconds since epoch = %i " %int(time.time())).encode(encoding='ascii', errors='ignore')))
               f.write("\nNanoseconds since last second = %f " %x) #Timestamp (nanoseconds past the last second) (byte 6-9)
               ser.write(bytes(str("\nNanoseconds since last second = %f " %x).encode(encoding='ascii', errors='ignore')))
               f.write("\nRecord size = %i " %sum(os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f)))  #Record size (byte 10-11)
               ser.write(bytes(str("\nRecord size = %i " %sum(os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f))).encode(encoding='ascii', errors='ignore')))
               f.write("\n8-lsb of md5 checksum = %s " %str(c[-8:]))  #Least significant 8 bits of the record checksum (byte 12)
               ser.write(bytes(str("\n8-lsb of md5 checksum = %s \n " %str(c[-8:])).encode(encoding='ascii', errors='ignore')))
               f.write("\nNon-Stream Metadata, %s %s %s " %(name0, name1, name2)) #Header
               numSkippedIntervals = ljm.waitForNextInterval(intervalHandle)
               curTick = ljm.getHostTick()
               duration = (curTick - lastTick)/1000
               curTime = datetime.now()
               curTimeStr = curTime.strftime("%Y/%m/%d %I:%M:%S%p")
               result0 = ljm.eReadName(handle, name0) #thermistor
               result1 = ljm.eReadName(handle, name1) #temp1 probe noted by sharpie
               result2 = ljm.eReadName(handle, name2) #temp2 probe not noted by sharpi
               ADC = 262144 #18-bit T7
               resistance0 = -(10000*result0)/(result0-5) #thermistorResistance
               invTemp = 1/(298.15)+1/(3950)*np.log(resistance0/10000)
               Temp0K = 1/invTemp
               Temp0C = Temp0K - 273.15 #thermistorCelsius
               Resistance1 = (result1)/(result1 - 5) #tempProbe1Resistance
               CurrentOut1 = result1/10000 #ohms
               TempOutC1 = (25/0.0002982)*CurrentOut1 + 22.9 #22 not 25 due to calibration
               Resistance2 = (result2)/(result2 - 5) #tempProbe2Resistance
               CurrentOut2 = result2/10000 #ohms
               TempOutC2 = (25/0.0002982)*CurrentOut2 + 20.5 #20 not 25 due to calibration
               print("%s reading: %f V, %f Ohms, %f C,  duration: %0.1f ms,  --skipped intervals: %i" %(name0, result0, resistance0, Temp0C, duration, numSkippedIntervals))
               print("%s reading: %f V, %f C, duration: %0.1f ms,  --skipped intervals: %i" %(name1, result1, TempOutC1, duration, numSkippedIntervals))
               print("%s reading: %f V, %f C, duration: %0.1f ms,  --skipped intervals: %i" %(name2, result2, TempOutC2, duration, numSkippedIntervals))
               print('Captured %s' % filename)
               f.write('\nCaptured %s' % filename)
               lastTick = curTick
               curIteration = curIteration + 1
               f.write("%s\nduration = %0.3f, Number of Skipped Intervals=%i\nAIN0=%0.3f, AIN1=%0.3f, AIN2=%0.3f\n" %(timeStr, duration, numSkippedIntervals, Temp0C, TempOutC1, TempOutC2))
               ser.write(bytes(str("%s\nduration = %0.3f, Number of Skipped Intervals=%i\nAIN0=%0.3f, AIN1=%0.3f, AIN2=%0.3f\n" %(timeStr, duration, numSkippedIntervals, Temp0C, TempOutC1, TempOutC2)).encode(encoding='ascii', errors='ignore')))
               wait(name0, name1, name2, camera)
               print("waiting")
               while numScans > scanRate:
                   with io.open(filePath, 'a') as f:
                       f = io.open(filePath, 'a')
                       f_aData = io.open(filePath_aData, 'a')
                       try:
                           #Ensure triggered Stream is disabled
                           ljm.eWriteName(handle,"STREAM_TRIGGER_INDEX",0)
                           #Ensure internally-clocked stream
                           ljm.eWriteName(handle,"STREAM_CLOCK_SOURCE",0)
                           
                           aNames = ["AIN_ALL_RANGE", "STREAM_SETTLING_US", "STREAM_RESOLUTION_INDEX"]
                           #RANGE WILL REFLECT EXPECTED VOLTAGES CURRENTLY 10.0 FOR T7 DEFAULT
                           #SETTLING CAN RANGE FROM 0-4400   #RESOLUTION INDEX 0 WILL YIELD FASTEST STREAM
                           aValues = [10.0, 0, 0]
                           numFrames = len(aNames)
                           ljm.eWriteNames(handle, numFrames, aNames, aValues)
                           
                           # Configure and start stream
                           scanRate = ljm.eStreamStart(handle, scansPerRead, numAddresses, aScanList, scanRate)
                           print("\nStream started with a scan rate of %0.0f Hz." % scanRate)
                           f.write("\nStream started with a scan rate of %0.0f Hz." % scanRate)
                           f.write("\n30-Second trial with 1-channels")  #Keep up with number of channels and length of trial
                           print("\nPerforming %i stream reads." % MAX_REQUESTS)
                           f.write("\nPerforming %i stream reads." % MAX_REQUESTS)
                           f.write("\n")
                           start = datetime.now()
                           totScans = 0
                           totSkip = 0  # Total skipped samples
                           i = 1
                           while i <= MAX_REQUESTS:     #FOR MULTIPLE SCAN QUERY  ::  DUE TO BE TESTED
                               ret = ljm.eStreamRead(handle)
                               aData = ret[0]
                               scans = len(aData) / numAddresses
                               totScans += scans
                                   # Count the skipped samples which are indicated by -9999 values. Missed
                                   # samples occur after a device's stream buffer overflows and are
                                   # reported after auto-recover mode ends.
                               curSkip = aData.count(-9999.0)
                               totSkip += curSkip
                               print("\neStreamRead %i" % i)
                               f.write("\neStreamRead %i" % i)   #Header // 1st run self-check
                               ainStr = ""
                               for j in range(0, numAddresses):
                                   ainStr += "%s = %0.5f, " % (aScanListNames[j], aData[j])
                                   print("  1st scan out of %i: %s" % (scans, ainStr))
                                   f.write("\n  1st scan out of %i: %s" % (scans, ainStr))
                                   print("  Scans Skipped = %0.0f, Scan Backlogs: Device = %i, LJM = "
                                         "%i" % (curSkip/numAddresses, ret[1], ret[2]))
                                   f.write("\n  Scans Skipped = %0.0f, Scan Backlogs: Device = %i, LJM = "
                                           "%i" % (curSkip/numAddresses, ret[1], ret[2]))
                                   i += 1
                               end = datetime.now()
                               print("\nTotal scans = %i" % (totScans))    #Notate shortcomings
                               f.write("\nTotal scans = %i" % (totScans))
                               tt = (end - start).seconds + float((end - start).microseconds) / 1000000
                               print("Time taken = %f seconds" % (tt))
                               f.write("Time taken = %f seconds" % (tt))
                               print("LJM Scan Rate = %f scans/second" % (scanRate))
                               f.write("LJM Scan Rate = %f scans/second" % (scanRate))
                               print("Timed Scan Rate = %f scans/second" % (totScans / tt))
                               f.write("Timed Scan Rate = %f scans/second" % (totScans / tt))
                               print("Timed Sample Rate = %f samples/second" % (totScans * numAddresses / tt))
                               f.write("Timed Sample Rate = %f samples/second" % (totScans * numAddresses / tt))
                               print("Skipped scans = %0.0f" % (totSkip / numAddresses))
                               f.write("Skipped scans = %0.0f" % (totSkip / numAddresses))
                               f.write("\nData")
                               x = int((i - 1)/7) #denominator number is particular to number of channels being streamed = numAddresses
                               f.write("%x" %x) #notates the numbered list per stream readout
                               f_aData.write(str(aData)[1:-1]) #clipped ends take out brackets for data analysis
                               f_aData.write(',')  #data (byte 13-n)
                               f.write("\n")
                               ser.write(bytes(str(aData[0:7]).encode(encoding='ascii', errors='ignore')))
                                #cd file of metadata  '/Downloads/Python_LJM_2018_10_19/2019_06_12-01_56_33PM-Radiometer-Metadata.txt
                               out = ser.read(125).decode(encoding='ascii', errors='ignore').strip()  #reading out gps should read 125 bytes; which is the full length of HASP serial latency string
                               print("Received: " + out)
                               f.write("HASP GPS: %s" %(out)) #writing serial data
                       #error self check
                       except ljm.LJMError:
                           ljme = sys.exc_info()[1]
                           print(ljme)
                           ser.write(bytes(str("Error -- %s" %(ljme)).encode(encoding='ascii', errors='ignore')))
                       except Exception:
                           e = sys.exc_info()[1]
                           print(e)
                           ser.write(bytes(str("Error -- %s" %(e)).encode(encoding='ascii', errors='ignore')))
                       try:
                           print("\nStop Stream")  #completion self check
                           f.write("\nStop Stream\n")
                           ljm.eStreamStop(handle)
                           ser.write(bytes(str("\nFinishing stream-- initializing non-stream operations\n").encode(encoding='ascii', errors='ignore')))
                           break
                       except ljm.LJMError:
                           ljme = sys.exc_info()[1]
                           print(ljme)
                           ser.write(bytes(str("Error -- %s" %(ljme)).encode(encoding='ascii', errors='ignore')))
                           break
                       except Exception:
                           e = sys.exc_info()[1]
                           print(e)
                           ser.write(bytes(str("Error -- %s" %(e)).encode(encoding='ascii', errors='ignore')))
                           
                           break
           except KeyboardInterrupt:
               break
           except Exception:
               import sys
               print(sys.exc_info()[1])
               ser.write(bytes(str("Error -- %s" %(sys.exc_info()[1])).encode(encoding='ascii', errors='ignore')))
               break
print("\nFinished")
f.close()
ljm.cleanInterval(intervalHandle)
ljm.close(handle)
sys.exit()
                  
