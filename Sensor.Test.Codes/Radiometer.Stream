from labjack import ljm
import io
import datetime
import os
import time
import sys
from time import sleep
from datetime import datetime, timedelta
import numpy as np

#Set up file
cwd = os.getcwd()
appStartTime = datetime.now()
startTimeStr = appStartTime.strftime("%Y/%m/%d %I:%M:%S%p")
timeStr = appStartTime.strftime("%Y_%m_%d-%I_%M_%S%p")
fileName = timeStr + "-%s-Trial.txt"%("Radiometer")
filePath = os.path.join(cwd, fileName)
fileNameAdded = fileName + '{counter:03d}'
filePathAdded = os.path.join(cwd, fileNameAdded)

#Configure port
handle = ljm.openS("T7", "ANY", "ANY")
info = ljm.getHandleInfo(handle)
name = "AIN0"
deviceType = info[0]
#aScanListNames = ["AIN0"]         #Scan List names to Stream as Test
aScanListNames=["AIN0", "AIN3", "AIN4","AIN5","AIN6","AIN7","AIN8","AIN9"]         #Scan List names to Stream for Radiometer, opto, and thermistor
numAddresses = len(aScanListNames)
aScanList = ljm.namesToAddresses(numAddresses, aScanListNames)[0] 
scanRate = 2100 #Scans per second per channel             #THE SCIENCE GOAL IS 2000 Hz :: USING A LARGER SCAN RATE WILL MAKEUP FOR PERFORMANCE 
numScans = 2101 #Number of scans to perform               #FOR CURRENT LOOP SETUP MUST BE LARGER THAN scanRate :: MAY CHANGE
MAX_REQUESTS = 20  # The number of eStreamRead calls that will be performed.          #DUE TO CHANGE DEPENDING ON NEED FOR TIME 
scansPerRead = int(scanRate) #toy with dividing by 2 here

###MAY NEED TO STOP STREAM BEFORE IT STARTS DEPENDING ON ACTIVE STREAM ERROR 2605 FROM PREVIOUS TRIAL###
#ljm.eStreamStop(handle)
###TESTING REQUIRED###

while numScans > scanRate:
    with io.open(filePath, 'a') as f:
        try:
            #Ensure triggered Stream is disabled
            ljm.eWriteName(handle,"STREAM_TRIGGER_INDEX",0)
            #Ensure internally-clocked stream
            ljm.eWriteName(handle,"STREAM_CLOCK_SOURCE",0)
            
            aNames = ["AIN_ALL_RANGE", "STREAM_SETTLING_US", "STREAM_RESOLUTION_INDEX"]
            #RANGE WILL REFLECT EXPECTED VOLTAGES CURRENTLY 10.0 FOR T7 DEFAULT
            #SETTLING CAN RANGE FROM 0-4400   #RESOLUTION INDEX 0 WILL YIELD FASTEST STREAM 
            aValues = [10.0, 0, 0]
            numFrames = len(aNames)
            ljm.eWriteNames(handle, numFrames, aNames, aValues)
            
            # Configure and start stream
            scanRate = ljm.eStreamStart(handle, scansPerRead, numAddresses, aScanList, scanRate)
            print("\nStream started with a scan rate of %0.0f Hz." % scanRate)
            f.write("\nStream started with a scan rate of %0.0f Hz." % scanRate)
            print("\nPerforming %i stream reads." % MAX_REQUESTS)
            f.write("\nPerforming %i stream reads." % MAX_REQUESTS)
            start = datetime.now()
            totScans = 0
            totSkip = 0  # Total skipped samples
            i = 1
            while i <= MAX_REQUESTS:     #FOR MULTIPLE SCAN QUERY  ::  DUE TO BE TESTED
                ret = ljm.eStreamRead(handle)
                aData = ret[0]
                scans = len(aData) / numAddresses
                totScans += scans
        # Count the skipped samples which are indicated by -9999 values. Missed
        # samples occur after a device's stream buffer overflows and are
        # reported after auto-recover mode ends.
                curSkip = aData.count(-9999.0)
                totSkip += curSkip
                print("\neStreamRead %i" % i)
                f.write("\neStreamRead %i" % i)
                ainStr = ""
                for j in range(0, numAddresses):
                    ainStr += "%s = %0.5f, " % (aScanListNames[j], aData[j])
                    print("  1st scan out of %i: %s" % (scans, ainStr))
                    f.write("\n  1st scan out of %i: %s" % (scans, ainStr))
                    print("  Scans Skipped = %0.0f, Scan Backlogs: Device = %i, LJM = "
                          "%i" % (curSkip/numAddresses, ret[1], ret[2]))
                    f.write("\n  Scans Skipped = %0.0f, Scan Backlogs: Device = %i, LJM = "
                          "%i" % (curSkip/numAddresses, ret[1], ret[2]))
                    i += 1
                end = datetime.now()
                print("\nTotal scans = %i" % (totScans))
                f.write("\nTotal scans = %i" % (totScans))
                tt = (end - start).seconds + float((end - start).microseconds) / 1000000
                print("Time taken = %f seconds" % (tt))
                f.write("Time taken = %f seconds" % (tt))
                print("LJM Scan Rate = %f scans/second" % (scanRate))
                f.write("LJM Scan Rate = %f scans/second" % (scanRate))
                print("Timed Scan Rate = %f scans/second" % (totScans / tt))
                f.write("Timed Scan Rate = %f scans/second" % (totScans / tt))
                print("Timed Sample Rate = %f samples/second" % (totScans * numAddresses / tt))
                f.write("Timed Sample Rate = %f samples/second" % (totScans * numAddresses / tt))
                print("Skipped scans = %0.0f" % (totSkip / numAddresses))
                f.write("Skipped scans = %0.0f" % (totSkip / numAddresses))
                f.write("\nData")
                #np.ndarray.tofile(np.array(aData),sep=";",format="%s")
                #X = np.array(aData).reshape(int(scans),8)        #Three lines for reformatting data from list format into an array 
                for item in aData:    #change to X if need                               #after in array turn into matrix corresponding to NumChannels
                    f.write("%s\n" % item)                       #can remove for flight, more for help in analyzing data
                #f.write(str(aData))           #Writes data as list
                #f.write("\nData-Channel")     
                #f.write("%s = %0.5f, " % (aScanList, aData[j])) #Ideally sets abbreviated header, not complete 
            #self check
        except ljm.LJMError:
            ljme = sys.exc_info()[1]
            print(ljme)
        except Exception:
            e = sys.exc_info()[1]
            print(e)  
        try:
            print("\nStop Stream")
            f.write("\nStop Stream")
            ljm.eStreamStop(handle)
            break 
        except ljm.LJMError:
            ljme = sys.exc_info()[1]
            print(ljme)
            break 
        except Exception:
            e = sys.exc_info()[1]
            print(e)
            break 
#close out
print("\nFinished")
#f.write("\nFinished")
f.close()       
sys.exit()
